(window.webpackJsonp=window.webpackJsonp||[]).push([[38],{387:function(t,e,r){"use strict";r.r(e);var n=r(42),l=Object(n.a)({},(function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"树"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#树"}},[t._v("#")]),t._v(" 树")]),t._v(" "),r("ol",[r("li",[r("p",[t._v("树是什么")]),t._v(" "),r("p",[t._v("树是一种分层数据的抽象模型。")])]),t._v(" "),r("li",[r("p",[t._v("树的相关术语")]),t._v(" "),r("ul",[r("li",[t._v("根节点")]),t._v(" "),r("li",[t._v("子树\n"),r("ul",[r("li",[t._v("左子树")]),t._v(" "),r("li",[t._v("右子树")])])]),t._v(" "),r("li",[t._v("二叉树\n"),r("ul",[r("li",[t._v("二叉搜索树（BST）")]),t._v(" "),r("li",[t._v("自平衡二叉搜索树（AVL）\n"),r("ul",[r("li",[t._v("任何一个节点左右两侧子树的高度之差最多为1")]),t._v(" "),r("li",[t._v("添加或移除节点时，AVL树会尽可能尝试转换为完全树。")]),t._v(" "),r("li",[t._v("红黑树\n"),r("ul",[r("li",[t._v("多次插入和删除的自平衡树，红黑树是比较好的")]),t._v(" "),r("li",[t._v("插入和删除频率较低（我们更需要多次进行搜索操作），那么AVL树比红黑树更好")])])])])])])])])]),t._v(" "),r("li",[r("p",[t._v("树的遍历")]),t._v(" "),r("ul",[r("li",[t._v("前序遍历")]),t._v(" "),r("li",[t._v("中序遍历")]),t._v(" "),r("li",[t._v("后序遍历\n"),r("ul",[r("li",[t._v("递归")]),t._v(" "),r("li",[t._v("非递归")])])])])]),t._v(" "),r("li",[r("p",[t._v("红黑树")]),t._v(" "),r("ol",[r("li",[t._v("每个节点不是红的就是黑的")]),t._v(" "),r("li",[t._v("树的根节点是黑的；")]),t._v(" "),r("li",[t._v("所有叶节点都是黑的（用NULL引用表示的节点）；")]),t._v(" "),r("li",[t._v("如果一个节点是红的，那么它的两个子节点都是黑的；")]),t._v(" "),r("li",[t._v("不能有两个相邻的红节点，一个红节点不能有红的父节点或子节点；")]),t._v(" "),r("li",[t._v("从给定的节点到它的后代节点（NULL叶节点）的所有路径包含相同数量的黑色节点。")])])])]),t._v(" "),r("p",[t._v("leetcode题目：")]),t._v(" "),r("table",[r("thead",[r("tr",[r("th",{staticStyle:{"text-align":"center"}},[t._v("题目")]),t._v(" "),r("th",{staticStyle:{"text-align":"left"}},[t._v("地址")]),t._v(" "),r("th",{staticStyle:{"text-align":"center"}},[t._v("题解")]),t._v(" "),r("th",{staticStyle:{"text-align":"center"}},[t._v("通过率")]),t._v(" "),r("th",{staticStyle:{"text-align":"center"}},[t._v("难度")])])]),t._v(" "),r("tbody",[r("tr",[r("td",{staticStyle:{"text-align":"center"}},[t._v("94")]),t._v(" "),r("td",{staticStyle:{"text-align":"left"}},[r("a",{attrs:{href:"https://leetcode-cn.com/problems/binary-tree-inorder-traversal",target:"_blank",rel:"noopener noreferrer"}},[t._v("二叉树的中序遍历"),r("OutboundLink")],1)]),t._v(" "),r("td",{staticStyle:{"text-align":"center"}},[r("a",{attrs:{href:"https://leetcode-cn.com/problems/binary-tree-inorder-traversal/solution",target:"_blank",rel:"noopener noreferrer"}},[t._v("855"),r("OutboundLink")],1)]),t._v(" "),r("td",{staticStyle:{"text-align":"center"}},[t._v("72.6%")]),t._v(" "),r("td",{staticStyle:{"text-align":"center"}},[t._v("中等")])]),t._v(" "),r("tr",[r("td",{staticStyle:{"text-align":"center"}},[t._v("98")]),t._v(" "),r("td",{staticStyle:{"text-align":"left"}},[r("a",{attrs:{href:"https://leetcode-cn.com/problems/validate-binary-search-tree",target:"_blank",rel:"noopener noreferrer"}},[t._v("验证二叉搜索树"),r("OutboundLink")],1)]),t._v(" "),r("td",{staticStyle:{"text-align":"center"}},[r("a",{attrs:{href:"https://leetcode-cn.com/problems/validate-binary-search-tree/solution",target:"_blank",rel:"noopener noreferrer"}},[t._v("968"),r("OutboundLink")],1)]),t._v(" "),r("td",{staticStyle:{"text-align":"center"}},[t._v("32.3%")]),t._v(" "),r("td",{staticStyle:{"text-align":"center"}},[t._v("中等")])]),t._v(" "),r("tr",[r("td",{staticStyle:{"text-align":"center"}},[t._v("100")]),t._v(" "),r("td",{staticStyle:{"text-align":"left"}},[r("a",{attrs:{href:"https://leetcode-cn.com/problems/same-tree",target:"_blank",rel:"noopener noreferrer"}},[t._v("相同的树"),r("OutboundLink")],1)]),t._v(" "),r("td",{staticStyle:{"text-align":"center"}},[r("a",{attrs:{href:"https://leetcode-cn.com/problems/same-tree/solution",target:"_blank",rel:"noopener noreferrer"}},[t._v("945"),r("OutboundLink")],1)]),t._v(" "),r("td",{staticStyle:{"text-align":"center"}},[t._v("60.1%")]),t._v(" "),r("td",{staticStyle:{"text-align":"center"}},[t._v("简单")])]),t._v(" "),r("tr",[r("td",{staticStyle:{"text-align":"center"}},[t._v("101")]),t._v(" "),r("td",{staticStyle:{"text-align":"left"}},[r("a",{attrs:{href:"https://leetcode-cn.com/problems/symmetric-tree",target:"_blank",rel:"noopener noreferrer"}},[t._v("对称二叉树"),r("OutboundLink")],1)]),t._v(" "),r("td",{staticStyle:{"text-align":"center"}},[r("a",{attrs:{href:"https://leetcode-cn.com/problems/symmetric-tree/solution",target:"_blank",rel:"noopener noreferrer"}},[t._v("1093"),r("OutboundLink")],1)]),t._v(" "),r("td",{staticStyle:{"text-align":"center"}},[t._v("52.9%")]),t._v(" "),r("td",{staticStyle:{"text-align":"center"}},[t._v("简单")])]),t._v(" "),r("tr",[r("td",{staticStyle:{"text-align":"center"}},[t._v("104")]),t._v(" "),r("td",{staticStyle:{"text-align":"left"}},[r("a",{attrs:{href:"https://leetcode-cn.com/problems/maximum-depth-of-binary-tree",target:"_blank",rel:"noopener noreferrer"}},[t._v("二叉树的最大深度"),r("OutboundLink")],1)]),t._v(" "),r("td",{staticStyle:{"text-align":"center"}},[r("a",{attrs:{href:"https://leetcode-cn.com/problems/maximum-depth-of-binary-tree/solution",target:"_blank",rel:"noopener noreferrer"}},[t._v("1245"),r("OutboundLink")],1)]),t._v(" "),r("td",{staticStyle:{"text-align":"center"}},[t._v("74.9%")]),t._v(" "),r("td",{staticStyle:{"text-align":"center"}},[t._v("简单")])]),t._v(" "),r("tr",[r("td",{staticStyle:{"text-align":"center"}},[t._v("144")]),t._v(" "),r("td",{staticStyle:{"text-align":"left"}},[r("a",{attrs:{href:"https://leetcode-cn.com/problems/binary-tree-preorder-traversal",target:"_blank",rel:"noopener noreferrer"}},[t._v("二叉树的前序遍历"),r("OutboundLink")],1)]),t._v(" "),r("td",{staticStyle:{"text-align":"center"}},[r("a",{attrs:{href:"https://leetcode-cn.com/problems/binary-tree-preorder-traversal/solution",target:"_blank",rel:"noopener noreferrer"}},[t._v("651"),r("OutboundLink")],1)]),t._v(" "),r("td",{staticStyle:{"text-align":"center"}},[t._v("66.6%")]),t._v(" "),r("td",{staticStyle:{"text-align":"center"}},[t._v("中等")])]),t._v(" "),r("tr",[r("td",{staticStyle:{"text-align":"center"}},[t._v("145")]),t._v(" "),r("td",{staticStyle:{"text-align":"left"}},[r("a",{attrs:{href:"https://leetcode-cn.com/problems/binary-tree-postorder-traversal",target:"_blank",rel:"noopener noreferrer"}},[t._v("二叉树的后序遍历"),r("OutboundLink")],1)]),t._v(" "),r("td",{staticStyle:{"text-align":"center"}},[r("a",{attrs:{href:"https://leetcode-cn.com/problems/binary-tree-postorder-traversal/solution",target:"_blank",rel:"noopener noreferrer"}},[t._v("615"),r("OutboundLink")],1)]),t._v(" "),r("td",{staticStyle:{"text-align":"center"}},[t._v("72.3%")]),t._v(" "),r("td",{staticStyle:{"text-align":"center"}},[t._v("中等")])]),t._v(" "),r("tr",[r("td",{staticStyle:{"text-align":"center"}},[t._v("235")]),t._v(" "),r("td",{staticStyle:{"text-align":"left"}},[r("a",{attrs:{href:"https://leetcode-cn.com/problems/lowest-common-ancestor-of-a-binary-search-tree",target:"_blank",rel:"noopener noreferrer"}},[t._v("二叉搜索树的最近公共祖先"),r("OutboundLink")],1)]),t._v(" "),r("td",{staticStyle:{"text-align":"center"}},[r("a",{attrs:{href:"https://leetcode-cn.com/problems/lowest-common-ancestor-of-a-binary-search-tree/solution",target:"_blank",rel:"noopener noreferrer"}},[t._v("377"),r("OutboundLink")],1)]),t._v(" "),r("td",{staticStyle:{"text-align":"center"}},[t._v("64.9%")]),t._v(" "),r("td",{staticStyle:{"text-align":"center"}},[t._v("简单")])]),t._v(" "),r("tr",[r("td",{staticStyle:{"text-align":"center"}},[t._v("236")]),t._v(" "),r("td",{staticStyle:{"text-align":"left"}},[r("a",{attrs:{href:"https://leetcode-cn.com/problems/lowest-common-ancestor-of-a-binary-tree",target:"_blank",rel:"noopener noreferrer"}},[t._v("二叉树的最近公共祖先"),r("OutboundLink")],1)]),t._v(" "),r("td",{staticStyle:{"text-align":"center"}},[r("a",{attrs:{href:"https://leetcode-cn.com/problems/lowest-common-ancestor-of-a-binary-tree/solution",target:"_blank",rel:"noopener noreferrer"}},[t._v("616"),r("OutboundLink")],1)]),t._v(" "),r("td",{staticStyle:{"text-align":"center"}},[t._v("65.2%")]),t._v(" "),r("td",{staticStyle:{"text-align":"center"}},[t._v("中等")])])])]),t._v(" "),r("p",[t._v("常用的方法：")]),t._v(" "),r("ol",[r("li",[t._v("递归")]),t._v(" "),r("li",[t._v("模拟栈")])])])}),[],!1,null,null,null);e.default=l.exports}}]);