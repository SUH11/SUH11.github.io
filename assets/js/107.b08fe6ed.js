(window.webpackJsonp=window.webpackJsonp||[]).push([[107],{455:function(v,e,_){"use strict";_.r(e);var o=_(42),t=Object(o.a)({},(function(){var v=this,e=v.$createElement,_=v._self._c||e;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h2",{attrs:{id:"event-loop"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#event-loop"}},[v._v("#")]),v._v(" Event Loop")]),v._v(" "),_("p",[v._v("一旦执行栈为空，Event Loop 就会从 Task 队列中拿出需要执行的代码并放入执行栈中执行，所以本质上来说 JS 中的异步还是同步行为。")]),v._v(" "),_("p",[v._v("宏任务："),_("code",[v._v("setTimeout")]),v._v(" "),_("code",[v._v("MessageChannel")]),v._v(" "),_("code",[v._v("postMessage")]),v._v(" "),_("code",[v._v("setImmediate")]),v._v(" "),_("code",[v._v("script")]),v._v(" "),_("code",[v._v("I/O")]),v._v(" "),_("code",[v._v("UI rendering")])]),v._v(" "),_("p",[v._v("微任务："),_("code",[v._v("Promise.then")]),v._v(" "),_("code",[v._v("proccess.nextTick")]),v._v(" "),_("code",[v._v("MutationObserver")])]),v._v(" "),_("p",[v._v("Event Loop执行顺序：")]),v._v(" "),_("ul",[_("li",[v._v("首先执行同步代码，这属于宏任务")]),v._v(" "),_("li",[v._v("当执行完所有同步代码后，执行栈为空，查询是否有异步代码需要执行")]),v._v(" "),_("li",[v._v("执行所有微任务")]),v._v(" "),_("li",[v._v("当执行完所有微任务后，如有必要会渲染页面")]),v._v(" "),_("li",[v._v("然后开始下一轮 Event Loop，执行宏任务中的异步代码，也就是 "),_("code",[v._v("setTimeout")]),v._v(" 中的回调函数")])]),v._v(" "),_("p",[v._v("Node中的Event Loop")]),v._v(" "),_("p",[v._v("和浏览器的Event Loop完全不同。")]),v._v(" "),_("p",[v._v("宏任务：")]),v._v(" "),_("ol",[_("li",[v._v("timer")]),v._v(" "),_("li",[v._v("I/O")]),v._v(" "),_("li",[v._v("idle、prepare")]),v._v(" "),_("li",[v._v("poll")]),v._v(" "),_("li",[v._v("check")]),v._v(" "),_("li",[v._v("close callbacks")])]),v._v(" "),_("p",[v._v("微任务：")]),v._v(" "),_("p",[v._v("process.nextTick")]),v._v(" "),_("p",[v._v("这个函数其实是独立于 Event Loop 之外的，它有一个自己的队列，当每个阶段完成后，如果存在 nextTick 队列，就会"),_("strong",[v._v("清空队列中的所有回调函数")]),v._v("，并且优先于其他 microtask 执行。")])])}),[],!1,null,null,null);e.default=t.exports}}]);