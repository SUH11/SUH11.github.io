(window.webpackJsonp=window.webpackJsonp||[]).push([[75],{425:function(v,_,t){"use strict";t.r(_);var T=t(42),l=Object(T.a)({},(function(){var v=this,_=v.$createElement,t=v._self._c||_;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("h1",{attrs:{id:"http-2特性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#http-2特性"}},[v._v("#")]),v._v(" HTTP/2特性")]),v._v(" "),t("p",[v._v("HTTP 有两个主要的缺点："),t("strong",[v._v("安全不足")]),v._v("和"),t("strong",[v._v("性能不高")]),v._v("。")]),v._v(" "),t("p",[v._v("互联网标准化组织 IETF 以 "),t("strong",[v._v("SPDY")]),v._v(" 为基础，综合其他多方的意见，终于推出了 HTTP/1 的继任者，也就是今天的主角“HTTP/2”，在性能方面有了一个大的飞跃。")]),v._v(" "),t("ol",[t("li",[t("p",[v._v("为什么不是 HTTP/2.0")]),v._v(" "),t("p",[v._v("以前的“1.0”“1.1”造成了很多的混乱和误解，让人在实际的使用中难以区分差异，所以就决定 HTTP 协议不再使用小版本号（minor version），只使用大版本号（major version），从今往后 HTTP 协议不会出现 HTTP/2.0、2.1，只会有“HTTP/2”“HTTP/3”……")])]),v._v(" "),t("li",[t("p",[v._v("兼容 HTTP/1")]),v._v(" "),t("p",[v._v("背负着 HTTP/1 庞大的历史包袱，否则就会破坏互联网上无数现有的资产")]),v._v(" "),t("ul",[t("li",[t("p",[t("strong",[v._v("语义")])]),v._v(" "),t("ul",[t("li",[t("p",[v._v("“语义”层不做改动，与 HTTP/1 完全一致")]),v._v(" "),t("blockquote",[t("p",[v._v("比如请求方法、URI、状态码、头字段等概念都保留不变")])])]),v._v(" "),t("li",[t("p",[v._v("HTTP/2 没有在 URI 里引入新的协议名，仍然用“http”表示明文协议，用“https”表示加密协议")]),v._v(" "),t("blockquote",[t("p",[v._v("让浏览器或者服务器去自动升级或降级协议，免去了选择的麻烦，让用户在上网的时候都意识不到协议的切换，实现平滑过渡")])])])])]),v._v(" "),t("li",[t("p",[t("strong",[v._v("语法")])])])])]),v._v(" "),t("li",[t("p",[v._v("头部压缩")]),v._v(" "),t("blockquote",[t("p",[v._v("HTTP/1：用头字段“Content-Encoding”指定 Body 的编码方式，比如用 gzip 压缩来节约带宽，但报文的另一个组成部分——Header 却被无视了，没有针对它的优化手段。")]),v._v(" "),t("p",[v._v("由于报文 Header 一般会携带“User Agent”“Cookie”“Accept”“Server”等许多固定的头字段，多达几百字节甚至上千字节，但 Body 却经常只有几十字节，非常浪费")])]),v._v(" "),t("p",[t("strong",[v._v("HPACK算法")])]),v._v(" "),t("ul",[t("li",[v._v("在客户端和服务器两端建立“字典”\n"),t("ul",[t("li",[v._v("用索引号表示重复的字符串，还釆用哈夫曼编码来压缩整数和字符串，可以达到 50%~90% 的高压缩率。")])])])]),v._v(" "),t("p",[t("strong",[v._v("二进制格式")])]),v._v(" "),t("ul",[t("li",[v._v("把原来的“Header+Body”的消息“打散”为数个小片的二进制“帧”（Frame）\n"),t("ul",[t("li",[v._v("“HEADERS”帧存放头数据")]),v._v(" "),t("li",[v._v("“DATA”帧存放实体数据。")]),v._v(" "),t("li",[v._v("类似“"),t("strong",[v._v("Chunked")]),v._v("”分块编码")])])])])]),v._v(" "),t("li",[t("p",[v._v("虚拟的“流”")]),v._v(" "),t("p",[v._v("消息的“碎片”到达目的地后应该怎么组装起来呢？")]),v._v(" "),t("p",[v._v("HTTP/2 为此定义了一个“流”（Stream）的概念，它是"),t("strong",[v._v("二进制帧的双向传输序列")]),v._v("，同一个消息往返的帧会分配一个唯一的流 ID")]),v._v(" "),t("blockquote",[t("p",[v._v("你可以把它想象成是一个虚拟的“数据流”，在里面流动的是一串有先后顺序的数据帧，这些数据帧按照次序组装起来就是 HTTP/1 里的请求报文和响应报文。")])]),v._v(" "),t("p",[v._v("因为“流”是虚拟的，实际上并不存在，所以 HTTP/2 就可以在一个 TCP 连接上用“流”同时发送多个“碎片化”的消息，这就是常说的“"),t("strong",[v._v("多路复用")]),v._v("”（ Multiplexing）——多个往返通信都复用一个连接来处理。")]),v._v(" "),t("ul",[t("li",[t("p",[v._v("乱序收发")]),v._v(" "),t("ul",[t("li",[v._v("多个请求 / 响应之间没有了顺序关系，不需要排队等待，也就不会再出现“队头阻塞”问题")])])]),v._v(" "),t("li",[t("p",[v._v("控制帧")]),v._v(" "),t("ul",[t("li",[v._v("管理虚拟的“流”，实现了优先级和流量控制")])])]),v._v(" "),t("li",[t("p",[v._v("服务器推送")]),v._v(" "),t("ul",[t("li",[v._v("服务器不再是完全被动地响应请求，也可以新建“流”主动向客户端发送消息")])])])])]),v._v(" "),t("li",[t("p",[v._v("强化安全")]),v._v(" "),t("ul",[t("li",[v._v("明文传输\n"),t("ul",[t("li",[v._v("HTTP/2 延续了 HTTP/1 的“明文”特点，可以像以前一样使用明文传输数据，不强制使用加密通信，不过格式还是二进制，只是不需要解密")])])]),v._v(" "),t("li",[v._v("“事实上”的 HTTP/2 是加密的\n"),t("ul",[t("li",[v._v("但由于 HTTPS 已经是大势所趋，而且主流的浏览器 Chrome、Firefox 等都公开宣布只支持加密的 HTTP/2")]),v._v(" "),t("li",[v._v("也就是说，互联网上通常所能见到的 HTTP/2 都是使用“https”协议名，跑在 TLS 上面。")])])]),v._v(" "),t("li",[v._v("“h2”表示加密的 HTTP/2，“h2c”表示明文的 HTTP/2")])])]),v._v(" "),t("li",[t("p",[v._v("协议栈")]),v._v(" "),t("p",[t("a",{attrs:{"data-fancybox":"",title:"协议栈",href:"https://static001.geekbang.org/resource/image/83/1a/83c9f0ecad361ba8ef8f3b73d6872f1a.png"}},[t("img",{attrs:{src:"https://static001.geekbang.org/resource/image/83/1a/83c9f0ecad361ba8ef8f3b73d6872f1a.png",alt:"协议栈"}})])])])]),v._v(" "),t("h3",{attrs:{id:"总结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[v._v("#")]),v._v(" 总结")]),v._v(" "),t("ol",[t("li",[v._v("HTTP 协议取消了小版本号，所以 HTTP/2 的正式名字不是 2.0；")]),v._v(" "),t("li",[v._v("HTTP/2 在“语义”上兼容 HTTP/1，保留了请求方法、URI 等传统概念；")]),v._v(" "),t("li",[v._v("HTTP/2 使用“HPACK”算法压缩头部信息，消除冗余数据节约带宽；")]),v._v(" "),t("li",[v._v("HTTP/2 的消息不再是“Header+Body”的形式，而是分散为多个二进制“帧”；")]),v._v(" "),t("li",[v._v("HTTP/2 使用虚拟的“流”传输消息，解决了困扰多年的“队头阻塞”问题，同时实现了“多路复用”，提高连接的利用率；")]),v._v(" "),t("li",[v._v("HTTP/2 也增强了安全性，要求至少是 TLS1.2，而且禁用了很多不安全的密码套件。")])])])}),[],!1,null,null,null);_.default=l.exports}}]);